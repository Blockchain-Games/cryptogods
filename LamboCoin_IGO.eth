pragma solidity ^0.4.8;

// LamboCoin - The Ferrari of coins
//      - Ultra limited edition, only 250 coins released publicly!
//      - the ORIGINAL collector coin
//      - 256 total Lambos spawned, ever. This is a ONE TIME OFFER
//      - 6 coins are retained for the developers (< 2.5% of all Lambos)
//      - Lambos are distributed amongst the accounts at the end of the ICO
//      who have sent the most Ether
//      - Make sure your balance is above the CurrentPrice at the end of the
//      ICO to get your Lambo(s). Don't miss out!! Watch our git for end dates
//      - send Ether straight to the contract address, it's that easy!
//      - LamboCoin is an ERC20 compliant contract, it will never 
//      selfdestruct and you can trade it as you wish with who you wish!
//	- Add the coin to your interface, see our Git for details

/**
 * Math operations with safety checks
 */
library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if( a == 0 || b == 0) return 0;
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b > 0);
    uint256 c = a / b;
    assert(a == (b * c) + (a % b));
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

contract LamboICO {
    using SafeMath for uint;

    // internal structures
    struct investorData {
        uint position;
        uint paid;
    }
    
    uint constant maximumLambos = 250;
    uint public investors;
    mapping(uint => address) private investorList;
    mapping(address => investorData) private investor;
    LamboCoin private LamboContract;
    address public LamboContractAddress;
    
    event newInvestor(address who, uint userNumber);
    event valueAdded(address who, uint howMuch);
    
    // visible methods
    function userStatistics(address you) view public returns (uint amount, uint lambos) {
        require(currentPrice() > 0);
        require(you != 0x0);
        amount = investor[you].paid;
        lambos = investor[you].paid.div(currentPrice());
    }
    
    function currentLamboPrice() view public returns (uint Gwei) {
        Gwei = currentPrice();
        return;
    }

    // buy in
    function () public payable {
        require(msg.value > 0);
        // find investor number
        uint investorNumber = investor[msg.sender].position;
        // if it's a new investor..
        if (investorNumber == 0) {
            // increment investors
            investorNumber = ++investors;
            require(investors > 0);
            // record investor details
            investorList[investorNumber] = msg.sender;
            investor[msg.sender].position = investorNumber;
            newInvestor(msg.sender, investorNumber);
        }
        // add the amount sent to the investors running total
        investor[msg.sender].paid = investor[msg.sender].paid.add(msg.value);
        valueAdded(msg.sender, msg.value);
    }

    // internal helpers
    function currentPrice() view private returns (uint lamboPrice) {
        require(investors > 0); // only work if people have started adding eth
        address InvestAddr = investorList[1];
        uint lowestPrice;
        lamboPrice = investor[InvestAddr].paid;
        // repeat until the price is found
        while(true) {
            uint distributedLambos;
            // find the lowest offer and set to the current lambo price
            uint i;
            for (i = 1; i <= investors; i++) {
                InvestAddr = investorList[i];
                if (investor[InvestAddr].paid < lamboPrice && investor[InvestAddr].paid > lowestPrice) {
                    lamboPrice = investor[InvestAddr].paid;
                }
            }
            
            // see how many lambos get distributed
            for (i = 1; i <= investors; i++) {
                InvestAddr = investorList[i];
                if (investor[InvestAddr].paid < lamboPrice) {
                    distributedLambos = distributedLambos.add(investor[InvestAddr].paid.div(lamboPrice));
                }
            }
            
            // if theres too many, try again with the next lowest price
            if (distributedLambos > maximumLambos) {
                lowestPrice = lamboPrice;
            } else {            // otherwise thats the current price
                return lamboPrice;
            }
        }
    }
    
    // maintenance
    address public owner;
    
    function LamboICO() public {
        owner = msg.sender;
        // create new ERC20 contract
        LamboContractAddress = new LamboCoin(maximumLambos + 6);
        LamboContract = LamboCoin(LamboContractAddress);
    }
    
    function endICO() public {
        require(msg.sender == owner); // only die when I want it to
        uint finalPrice = currentPrice();
        // endow Lambos to winners
        uint i;
        for (i = 0; i <= investors; i++) {
            // for each investor
            address person = investorList[i];
            uint lambosOwed = investor[person].paid.div(finalPrice);
            // give them (investor.paid / lamboprice) lambos
            if (lambosOwed > 0) {
                LamboContract.distribute(person, lambosOwed);
            }
            // refund what we have to    
        }
        LamboContract.completeDistribution();
        // kill this contract, LamboCoin contract ownership and remaining Lambos are passed to me (this.owner)
        LamboContract.transfer(owner, LamboContract.balanceOf(this));
        LamboContract.transferOwnership(owner);
        selfdestruct(owner);
    }
}

// Token name: LamboCoin token
// modded from source of contract 0xf7Dca20054469a1d548b20859a100B9EC6ff1f61
// looks to be taken from elsewhere anyway
// dont forget to launch on testnet and take copy json of contract somewhere.. too lazy to reproduce

contract ForeignToken {
    function balanceOf(address _owner) constant public returns (uint256);
    function transfer(address _to, uint256 _value) public returns (bool);
}

contract ERC20_Base {
    uint256 public totalSupply;
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface Token { 
    function distr(address _to, uint256 _value) public returns (bool);
    function totalSupply() constant public returns (uint256 supply);
    function balanceOf(address _owner) constant public returns (uint256 balance);
}

contract LamboCoin is ERC20_Base {
    using SafeMath for uint256;
   
    ////////////////////////// Internals //////////////////////////
    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;

    string public constant name = "LamboCoin";
    string public constant symbol = "Lamborghini";
    uint public constant decimals = 0;
    
    uint public totalSupply;
    int private distributedSupply;
    
    int private constant ICOComplete = -1;

    ////////////////////////// Events //////////////////////////
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    ////////////////////////// Function Modifiers //////////////////////////
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    
    modifier liveICO() {        
        require(distributedSupply <= int(totalSupply));
        require(distributedSupply >= 0);
        _;
    }
    
    // mitigates the ERC20 short address attack
    modifier onlyPayloadSize(uint size) {
        assert(msg.data.length >= size + 4);
        _;
    }
    
    ////////////////////////// Maintenance //////////////////////////
    address owner;
        
    function LamboCoin (uint _totalSupply) public {
        assert(_totalSupply > 0);
        owner = msg.sender;
        totalSupply = _totalSupply;
    }
    
    // tips, i guess?
    function () external payable {
    }
    
    function withdraw() onlyOwner public {
        uint256 etherBalance = this.balance;
        owner.transfer(etherBalance);
    }
    
    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {
        ForeignToken token = ForeignToken(_tokenContract);
        uint256 amount = token.balanceOf(address(this));
        return token.transfer(owner, amount);
    }
    
    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){
        ForeignToken t = ForeignToken(tokenAddress);
        uint bal = t.balanceOf(who);
        return bal;
    }
    
    function transferOwnership(address newOwner) onlyOwner public {
        require(newOwner != address(0));
        owner = newOwner;
    }
    
    ////////////////////////// ICO Functionality //////////////////////////
    function distribute(address _to, uint256 _amount) onlyOwner liveICO public returns (bool) {
        assert(_amount >= 0);
        assert(_to != 0x0);
        balances[_to] = balances[_to].add(_amount);
        distributedSupply += int(_amount);
        Transfer(address(0), _to, _amount);
        return true;
    }
    
    function completeDistribution() onlyOwner liveICO public returns (bool) {
        assert(distributedSupply >= 0);
        assert(distributedSupply >= 0);
        uint remainingLambos = totalSupply - uint(distributedSupply);
        // ... distribute to us
        distribute(owner, remainingLambos);
        distributedSupply = ICOComplete;         // flag ICO is over
    }

    ////////////////////////// ERC20 Functionality //////////////////////////
    function balanceOf(address _owner) constant public returns (uint256) {
	    return balances[_owner];
    }
    
    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {

        require(_to != address(0));
        require(_amount <= balances[msg.sender]);
        
        balances[msg.sender] = balances[msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        Transfer(msg.sender, _to, _amount);
        return true;
    }
    
    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {

        require(_to != address(0));
        require(_amount <= balances[_from]);
        require(_amount <= allowed[_from][msg.sender]);
        
        balances[_from] = balances[_from].sub(_amount);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        Transfer(_from, _to, _amount);
        return true;
    }
    
    function approve(address _spender, uint256 _value) public returns (bool success) {
        // mitigates the ERC20 spend/approval race condition
        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
    
    function allowance(address _owner, address _spender) constant public returns (uint256) {
        return allowed[_owner][_spender];
    }
}
